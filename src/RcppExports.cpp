// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// encode_sequences
Rcpp::IntegerVector encode_sequences(Rcpp::StringVector Seqs);
RcppExport SEXP _crio_encode_sequences(SEXP SeqsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type Seqs(SeqsSEXP);
    rcpp_result_gen = Rcpp::wrap(encode_sequences(Seqs));
    return rcpp_result_gen;
END_RCPP
}
// get_cell_barcodes
Rcpp::StringVector get_cell_barcodes(std::string fname, std::string dname, Rcpp::RObject barcodelen);
RcppExport SEXP _crio_get_cell_barcodes(SEXP fnameSEXP, SEXP dnameSEXP, SEXP barcodelenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type fname(fnameSEXP);
    Rcpp::traits::input_parameter< std::string >::type dname(dnameSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type barcodelen(barcodelenSEXP);
    rcpp_result_gen = Rcpp::wrap(get_cell_barcodes(fname, dname, barcodelen));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_crio_encode_sequences", (DL_FUNC) &_crio_encode_sequences, 1},
    {"_crio_get_cell_barcodes", (DL_FUNC) &_crio_get_cell_barcodes, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_crio(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
